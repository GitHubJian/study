当前服务器的瓶颈
    并发连接的最大请求数
作者的理念：
    创建具有实时推送能力的网站
主要的思路：
    使用非阻塞的，事件驱动的 I/O 操作来保持在处理跨平台 (across distributed devices) 数据密集型实时应用时的轻巧高效

优点
    1.采用事件驱动异步编程
    2.非阻塞模式下的IO处理，资源消耗相对较低，负载比较出众
    3.数据密集型分布式环境下的实时应用
缺点
    1.可靠性比较低，一旦崩溃服务就挂掉了
    2.单线程CPU利用不充分

解决缺点
    1.ngix做负载均衡
    2.多进程绑定一个端口监听
    3.mainprocess负责监听，childprocess负责处理
    
完美case：
    1.Restful Api
        多个参数，解析组合成一个响应
    2.twitter 队列
    3.针对某一个点的统计，实时监控
适用场景
    1.非阻塞IO模型
    2.单页面多ajax请求
    3.准时聊天系统
不适合
    高密集cpu处理 io处理较轻

优化方案
    用Nginx反向代理
        1.实现一个反向代理服务器
            Nginx
                1.权限与端口分配
                2.静态资源处理
                3.Node崩溃
                4.缓解DoS攻击
        2.缓存静态文件
        3.多服务器负载均衡
        4.代理websocket链接
        5.实现ssl/tls和http2
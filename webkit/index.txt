DOM Tree：浏览器将HTML解析成树形的数据结构
CSS Rule Tree：浏览器将CSS解析成树形的数据结构
Render Tree: DOM和CSSOM合并后生成Render Tree
layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置
painting: 按照算出来的规则，通过显卡，把内容画到屏幕上
reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 reflow,异步 reflow 或增量异步 reflow
repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变

网络请求
    1.用户输入url并敲击回车
    2.DNS解析
    3.发起TCP的3次握手
    4.建立TCP连接后发起http请求
    5.服务器端响应http请求，浏览器得到html代码
过程
    1. 浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。
    2. 将CSS解析成 CSS Rule Tree 。
    3. 根据DOM树和CSSOM来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于 DOM 树，因为一些像Header或display:none的东西就没必要放在渲染树中了。
    4. 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。
    5. layout，顾名思义就是计算出每个节点在屏幕中的位置，层树
    6. 再下一步就是绘制，即遍历render树，并使用UI后端层绘制每个节点             

过程1.
    标记化算法
        是词法分析过程，将输入内容解析成多个标记。HTML标记包括起始标记、结束标记、属性名称和属性值。
        标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束
    树构建算法
        标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。
        这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。
        此堆栈用于纠正嵌套错误和处理未关闭的标记。
        其算法也可以用状态机来描述。
        这些状态称为“插入模式”。

注意
1.Dom树的构建是从文档加载开始的
DOM树的构建是从接受到文档开始的
一边会进行将字节转化为字符，字符转化为标记，标记构建dom树，这个过程被分为标记化和树构建 
在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来
2.Render Tree
DOM tree & CSS tree 一边加载，一边解析，一边渲染的工作现象
3.CSS嵌套层级
嵌套越多越增加浏览器的工作量，而不会越快
4.layout
Dirty位系统，如果渲染器发生了变化或者其子代发生了变化就会被标注为”dirty”或children are dirty，需要进行布局



onload事件
    当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了
DOMContentLoaded 事件
    当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash

优化方案
http请求
    App Cache
    DNS
    TCP
    HTTP协议
浏览器渲染
    尽快展示
    分块传输
JS 优化
    1.向数组中插入元素
        a.push(6) => a[a.length]=6;
        a.unshift(0) => [0].concat(a)
    2.ifelseif
        =>switch
        =>let obj = {
            a:fn1,
            b:fn2
        }
        (o in obj) && obj[o]();
    3.in & hasOwnProperty
        取值属性
    4.=> 函数
        减少代码行数&return
    5.indexOf()>-1 位运算较快
        !~-1 true
        ~-1 false
        ~0 true
    6.数值取整
        第一选择. Math.trunc(x)
        第二选择. ~~x
    7.字符串拼接
        ''.concat(..str)
    8.字符串 & 数字
        +str
        ''+num
    9.用===代替==
        不需要隐式类型转换
    10.使用局部变量
    11.优化循环
        dowhile
        while
        for
        foreach
            1.减值迭代 从尾部开始迭代
            2.简化终止条件
            3.简化循环体
            4.使用后测试循环
    12.循环次数一定时，展开循环
        Duff装置
    13.减少多次声明
    14.插入迭代值
        val[i];i++ => val[i++]
    15.使用直接量
    16.尾调用

Web性能优化
    网页内容
        1.减少http请求次数
        2.减少DNS查询次数

        3.避免页面跳转
            避免301多次跳转
        4.缓存Ajax
            添加Expires 或 Cache-Control报文头使回复可以被客户端缓存
            压缩    回复内容
            减少dns查询
            精简javascript
            避免跳转
            配置Etags
        5.延迟加载
            网页最初加载需要的最小内容集
        6.提前加载
        7.减少DOM元素数量
        8.根据域名划分内容
            控制域名使用在2-4个之间
        9.减少iframe数量
        10.避免404
    服务器
        1.使用CDN
        2.添加Expires 或Cache-Control报文头
        3.Gzip压缩传输文件
        4.配置ETags
        5.尽早flush输出
        6.使用GET Ajax请求
        7.避免空的图片src
    Cookie
        1.减少Cookie大小
        2.页面内容使用无cookie域名
            静态资源都没必要cookie，采用不同的domain来单独存放这些静态文件
    CSS
        1.将样式表置顶
        2.避免CSS表达式
        3.用<link>代替@import
        4.避免使用Filters
    JavaScript
        1.将脚本置底
        2.使用外部Javascirpt和CSS文件
        3.精简Javascript和CSS
        4.去除重复脚本
        5.减少DOM访问
        6.使用智能事件处理
            通过不同的方式尽量少去触发事件，如果必要就尽早的去处理事件
    图片
        1.优化图像
        2.优化CSS Sprite
        3.不要在HTML中缩放图片
        4.使用小且可缓存的favicon.ico
    移动客户端
        1.保持单个内容小于25KB

Vuex
    状态管理模式
    解决什么问题，单向数据流
        1.多个视图依赖于同一状态
        2.来自不同视图的行为需要变更同一状态
    什么情况下我应该使用 Vuex
        中大型单页应用
    核心
        “store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)
        1.Vuex 的状态存储是响应式的
        2.不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation
        const store = new Vuex.Store({
            state: {
                count: 0
            },
            mutations: {
                increment (state) {
                state.count++
                }
            }
        })
        store.commit('increment');
        store.state.count; // 1
    核心概念
        1.State
            # 单一状态树，唯一数据源（SSOT）
            # 在 Vue 组件中获得 Vuex 状态
                Vue.use(Vuex)
                this.$store.state.count
            # mapState 辅助函数
                computed: mapState({count:state=>state.count})
                computed: {...mapState({ //TODO })}
        2.Getter
            getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的
            getters: {
                todo:(state, getters) => {
                    // 通过属性访问,缓存
                    return 1
                };
                todo2:(state,getters)=>(id)=>{
                    //方法 不缓存
                    return id;
                }
            }
            //应用
            store.getters.todo
            computed:{
                doTodos:() => {
                    return this.$store.getters.todo;
                }
            }
        3.Mutation
            mutations: {
                //必须是sync函数，devtools不能捕获异步状态
                increment (state, payload) {
                    // payload 载荷
                    // 变更状态
                    state.count++
                }
            }
            //应用
            store.commit(increment,payload);
        4.Action
            1.Action 提交的是 mutation，而不是直接变更状态。
            2.Action 可以包含任意异步操作
            actions: {
                increment (context[,payload]) {
                    context.commit('increment')
                }
            }
            //应用
            store.dispatch('increment'[,payload]);//返回thenable
            methods:{
                ...mapAction([])
            }
        5.Module
            命名空间
                默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间
                namespaced: true
                注意： state 和 getter，调用
            模块动态注册
                store.registerModule('myModule', {// TODO })


